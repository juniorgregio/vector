version: "3.7"
services:

## --------------------------- ORION --------------------------- ##

  studio:
    image: supabase/studio:20231023-7e2cd92 ## Versão da imagem

    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/api/profile', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"
        ]
      timeout: 5s
      interval: 5s
      retries: 3

    networks:
      - minha_rede ## Nome da rede interna
    
    environment:

      - STUDIO_LOG=debug
      ## Dados Postgres
      - POSTGRES_PASSWORD=SENHA_DO_POSTGRES_AQUI ## Senha do Postgres #OK

      ## Branding
      - DEFAULT_ORGANIZATION_NAME=OrionDesign ## Nome da Empresa
      - DEFAULT_PROJECT_NAME=SetupOrion ## Nome do Projeto

      ## Urls
      - SUPABASE_URL=http://kong:8000
      - SUPABASE_PUBLIC_URL=https://sup-api.tinklare.com ## Url do Kong
      - STUDIO_PG_META_URL=http://meta:8080

      ## Logflare
      - LOGFLARE_API_KEY=69ab4df7-0098-4821-9951-7f2b8bbe6d14 ## Key aleatória
      - LOGFLARE_URL=http://analytics:4000
      - NEXT_PUBLIC_ENABLE_LOGS=true
      - NEXT_ANALYTICS_BACKEND_PROVIDER=postgres

      ## ANON_KEY & SERVICE_KEY
      - SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogImFub24iLAogICJpc3MiOiAic3VwYWJhc2UiLAogICJpYXQiOiAxNzAzMzg2ODAwLAogICJleHAiOiAxODYxMjM5NjAwCn0.kU_d1xlxfuEgkYMC0mYoiZHQpUvRE2EnilTZ7S0bfIM ## ANON_KEY
      - SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogInNlcnZpY2Vfcm9sZSIsCiAgImlzcyI6ICJzdXBhYmFzZSIsCiAgImlhdCI6IDE3MDMzODY4MDAsCiAgImV4cCI6IDE4NjEyMzk2MDAKfQ.mj3UcBqInQLBf0hTWf5HILeZa8yKfT5Oic6oFbO11LM ## SERVICE_KEY

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

## --------------------------- ORION --------------------------- ##

  kong:
    image: kong:2.8.1 ## Versão da imagem
    entrypoint: bash -c 'eval "echo \"$$(cat ~/temp.yml)\"" > ~/kong.yml && /docker-entrypoint.sh kong docker-start'
    
    networks:
      - minha_rede ## Nome da rede interna
    ports:
      - "8000:8000/tcp" ## Porta externa Kong Http
      - "8443:8443/tcp" ## Porta externa Kong Https

    environment:

      - KONG_LOG_LEVEL=debug
      ## Dados Login Supabase
      - DASHBOARD_USERNAME=OrionDesign ## Usuario Kong
      - DASHBOARD_PASSWORD=Senha123_ ## Senha Kong

      ## Dados Kong
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/home/kong/kong.yml
      - KONG_DNS_ORDER=LAST,A,CNAME
      - KONG_PLUGINS=request-transformer,cors,key-auth,acl,basic-auth
      - KONG_NGINX_PROXY_PROXY_BUFFER_SIZE=160k
      - KONG_NGINX_PROXY_PROXY_BUFFERS=64 160k

      ## ANON_KEY & SERVICE_KEY
      - SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogImFub24iLAogICJpc3MiOiAic3VwYWJhc2UiLAogICJpYXQiOiAxNzAzMzg2ODAwLAogICJleHAiOiAxODYxMjM5NjAwCn0.kU_d1xlxfuEgkYMC0mYoiZHQpUvRE2EnilTZ7S0bfIM ## ANON_KEY
      - SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogInNlcnZpY2Vfcm9sZSIsCiAgImlzcyI6ICJzdXBhYmFzZSIsCiAgImlhdCI6IDE3MDMzODY4MDAsCiAgImV4cCI6IDE4NjEyMzk2MDAKfQ.mj3UcBqInQLBf0hTWf5HILeZa8yKfT5Oic6oFbO11LM ## SERVICE_KEY

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager  
      labels:
        - traefik.enable=true
        - traefik.http.routers.kong.rule=Host(`sup-api.tinklare.com`) ## Url do Kong
        - traefik.http.services.kong.loadbalancer.server.port=8000
        - traefik.http.routers.kong.service=kong
        - traefik.http.routers.kong.entrypoints=websecure
        - traefik.http.routers.kong.tls.certresolver=letsencryptresolver
        - traefik.http.routers.kong.tls=true

    volumes:
      - /root/supabase/docker/volumes/api/kong.yml:/home/kong/temp.yml:ro

## --------------------------- ORION --------------------------- ##

  auth:
    image: supabase/gotrue:v2.145.0 ## Versão da imagem

    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9999/health"
        ]
      timeout: 5s
      interval: 5s
      retries: 3

    networks:
      - minha_rede ## Nome da rede interna

    ports:
      - 9999:9999

    environment:
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - API_EXTERNAL_URL=https://sup-api.tinklare.com ## Url do Kong
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_DB_DATABASE_URL=postgres://supabase_auth_admin:SENHA_DO_POSTGRES_AQUI@db:5344/postgres  ## Senha do Postgres #OK
      - GOTRUE_SITE_URL=https://sup-api.tinklare.com ## link editor supabase
      - GOTRUE_URI_ALLOW_LIST=
      - GOTRUE_JWT_ADMIN_ROLES=service_role
      - GOTRUE_JWT_AUD=authenticated
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
      - GOTRUE_JWT_EXP=3600
      - GOTRUE_JWT_SECRET=fcvxe9oxp6ppcpn3c4dyi8inf0bjs91xmfd00tpp ## JWT_SECRET

      ## Dados SMTP
      - GOTRUE_DISABLE_SIGNUP=false ## Desativar inscrições
      - GOTRUE_EXTERNAL_EMAIL_ENABLED=true
      - GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLE=false
      - GOTRUE_MAILER_AUTOCONFIRM=false ## Enviar email para autenticar
      - GOTRUE_SMTP_ADMIN_EMAIL=orion@oriondesign.art.br ## Email SMTP
      - GOTRUE_SMTP_HOST=smtp.hostinger.com ## Host SMTP
      - GOTRUE_SMTP_PORT=587 ## Porta SMTP
      - GOTRUE_SMTP_USER=orion@oriondesign.art.br ## Usuario SMTP
      - GOTRUE_SMTP_PASS=Senha123_ ## Senha SMTP
      - GOTRUE_SMTP_SENDER_NAME=orion@oriondesign.art.br ## Email SMTP

      ## Paths SMTP
      - GOTRUE_MAILER_URLPATHS_INVITE=/auth/v1/verify
      - GOTRUE_MAILER_URLPATHS_CONFIRMATION=/auth/v1/verify
      - GOTRUE_MAILER_URLPATHS_RECOVERY=/auth/v1/verify
      - GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE=/auth/v1/verify

      ## Autenticação por telefone
      - GOTRUE_EXTERNAL_PHONE_ENABLED=false
      - GOTRUE_SMS_AUTOCONFIRM=false

## --------------------------- ORION --------------------------- ##

  rest:
    #image: postgrest/postgrest:v11.2.0 ## Versão da imagem
    image: postgrest/postgrest:v12.0.1 ## Versão da imagem
    command: "postgrest"

    networks:
      - minha_rede ## Nome da rede interna

    environment:
      ## Dados postgres
      - PGRST_DB_URI=postgres://authenticator:SENHA_DO_POSTGRES_AQUI@db:5344/postgres  ## Senha do Postgres #OK
      - PGRST_DB_SCHEMAS=public,storage,graphql_public
      - PGRST_DB_ANON_ROLE=anon
      - PGRST_DB_USE_LEGACY_GUCS=false

      ## Dados JWT
      - PGRST_JWT_SECRET=fcvxe9oxp6ppcpn3c4dyi8inf0bjs91xmfd00tpp ## JWT_SECRET
      - PGRST_APP_SETTINGS_JWT_SECRET=fcvxe9oxp6ppcpn3c4dyi8inf0bjs91xmfd00tpp ## JWT_SECRET
      - PGRST_APP_SETTINGS_JWT_EXP=3600

## --------------------------- ORION --------------------------- ##

  realtime:
    #image: supabase/realtime:v2.25.35 ## Versão da imagem
    image: supabase/realtime:v2.28.32 ## Versão da imagem
    command: >
      sh -c "/app/bin/migrate && /app/bin/realtime eval 'Realtime.Release.seeds(Realtime.Repo)' && /app/bin/server"

    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "printf \\0 > /dev/tcp/localhost/4000"
        ]
      timeout: 5s
      interval: 5s
      retries: 3

    networks:
      - minha_rede ## Nome da rede interna
  
    environment:
      ## Porta RealTime
      - PORT=4000

      ## Dados Postgres
      - DB_HOST=db
      - DB_PORT=5344 ## Porta do Postgres
      - DB_USER=supabase_admin
      - DB_PASSWORD=SENHA_DO_POSTGRES_AQUI # OK
      - DB_NAME=postgres
      - DB_AFTER_CONNECT_QUERY=SET search_path TO _realtime ##########################
      - DB_ENC_KEY=supabaserealtime

      ## Dados JWT
      - API_JWT_SECRET=fcvxe9oxp6ppcpn3c4dyi8inf0bjs91xmfd00tpp ## JWT_SECRET

      ## Secret Key
      - SECRET_KEY_BASE=UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq

      ## Ainda não procurei saber o que essas coisas fazem
      - FLY_ALLOC_ID=fly123
      - FLY_APP_NAME=realtime
      - ERL_AFLAGS=-proto_dist inet_tcp
      - ENABLE_TAILSCALE=false
      - DNS_NODES="''"

## --------------------------- ORION --------------------------- ##

  storage:
    #image: supabase/storage-api:v0.43.11 ## Versão da imagem
    image: supabase/storage-api:v1.0.6 ## Versão da imagem

    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5000/status"
        ]
      timeout: 15s
      interval: 5s
      retries: 3

    networks:
      - minha_rede ## Nome da rede interna
    ports:
      - 5000:5000 ## Porta externa
  
    environment:
      ## Dados JWT
      - PGRST_JWT_SECRET=fcvxe9oxp6ppcpn3c4dyi8inf0bjs91xmfd00tpp ## JWT_SECRET

      ## Dados Postgrest
      - POSTGREST_URL=http://rest:3000
      - DATABASE_URL=postgres://supabase_admin:SENHA_DO_POSTGRES_AQUI@db:5344/postgres  ## Senha do Postgres #OK
      - FILE_SIZE_LIMIT=52428800

      ## Informações Storage
      - STORAGE_BACKEND=s3 ## Coloque s3 para minio e descomente os outros campos
      #- FILE_STORAGE_BACKEND_PATH=/var/lib/storage
      - TENANT_ID=stub
      - REGION=eu-south ## Região
      - AWS_DEFAULT_REGION=eu-south ## Localização MinIO
      - GLOBAL_S3_BUCKET=supabase ## Nome da bucket do MinIO
      - GLOBAL_S3_ENDPOINT=https://api-sdo.tinklare.com/
      - GLOBAL_S3_PROTOCOL=https
      - GLOBAL_S3_FORCE_PATH_STYLE=true
      - AWS_ACCESS_KEY_ID=w7rPYAov0fUS8RDYSd8h ## Access Key
      - AWS_SECRET_ACCESS_KEY=pCco6ubflYUhwa7or2348jM3RyVyugvsGVKzDiQG ## Secret Key

      ## Dados ImageProxy 
      - ENABLE_IMAGE_TRANSFORMATION=true
      - IMGPROXY_URL=http://imgproxy:5001

      ## ANON_KEY & SERVICE_KEY
      - ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogImFub24iLAogICJpc3MiOiAic3VwYWJhc2UiLAogICJpYXQiOiAxNzAzMzg2ODAwLAogICJleHAiOiAxODYxMjM5NjAwCn0.kU_d1xlxfuEgkYMC0mYoiZHQpUvRE2EnilTZ7S0bfIM ## ANON_KEY
      - SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogInNlcnZpY2Vfcm9sZSIsCiAgImlzcyI6ICJzdXBhYmFzZSIsCiAgImlhdCI6IDE3MDMzODY4MDAsCiAgImV4cCI6IDE4NjEyMzk2MDAKfQ.mj3UcBqInQLBf0hTWf5HILeZa8yKfT5Oic6oFbO11LM ## SERVICE_KEY
      - LOG_LEVEL=debug
    volumes:
      - /root/supabase/docker/volumes/storage:/var/lib/storage:z

## --------------------------- ORION --------------------------- ##

  imgproxy:
    image: darthsim/imgproxy:v3.8.0 ## Versão da imagem

    healthcheck:
      test: [ "CMD", "imgproxy", "health" ]
      timeout: 5s
      interval: 5s
      retries: 3

    networks:
      - minha_rede ## Nome da rede interna

    environment:
      ## Dados do ImgProxy
      - IMGPROXY_BIND=:5001
      - IMGPROXY_LOCAL_FILESYSTEM_ROOT=/
      - IMGPROXY_USE_ETAG=true
      - IMGPROXY_ENABLE_WEBP_DETECTION=true

    volumes:
      - /root/supabase/docker/volumes/storage:/var/lib/storage:z

## --------------------------- ORION --------------------------- ##

  meta:
    #image: supabase/postgres-meta:v0.68.0 ## Versão da imagem
    image: supabase/postgres-meta:v0.80.0 ## Versão da imagem

    networks:
      - minha_rede ## Nome da rede interna
    ports:
      - 8080:8080

    environment:
      ## Dados Meta
      - PG_META_PORT=8080

      ## Dados postgres
      - PG_META_DB_HOST=db
      - PG_META_DB_PORT=5344 ## Porta do Postgres
      - PG_META_DB_NAME=postgres
      - PG_META_DB_USER=supabase_admin
      - PG_META_DB_PASSWORD=SENHA_DO_POSTGRES_AQUI  ## Senha do Postgres # OK

## --------------------------- ORION --------------------------- ##

  functions:
    #image: supabase/edge-runtime:v1.22.4 ## Versão da imagem
    image: supabase/edge-runtime:v1.45.2 ## Versão da imagem
    command:
      - start
      - --main-service
      - /home/deno/functions/main ############

    networks:
      - minha_rede ## Nome da rede interna
      
    environment:
      ## Url Api Kong
      - SUPABASE_URL=http://kong:8000

      ## Dados Postgres
      - SUPABASE_DB_URL=postgresql://postgres:SENHA_DO_POSTGRES_AQUI@db:5344/postgres  ## Senha do Postgres #OK
      
      ## ANON_KEY & SERVICE_KEY
      - SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogImFub24iLAogICJpc3MiOiAic3VwYWJhc2UiLAogICJpYXQiOiAxNzAzMzg2ODAwLAogICJleHAiOiAxODYxMjM5NjAwCn0.kU_d1xlxfuEgkYMC0mYoiZHQpUvRE2EnilTZ7S0bfIM ## ANON_KEY
      - SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogInNlcnZpY2Vfcm9sZSIsCiAgImlzcyI6ICJzdXBhYmFzZSIsCiAgImlhdCI6IDE3MDMzODY4MDAsCiAgImV4cCI6IDE4NjEyMzk2MDAKfQ.mj3UcBqInQLBf0hTWf5HILeZa8yKfT5Oic6oFbO11LM ## SERVICE_KEY
      
      ## Dados JWT
      - JWT_SECRET=fcvxe9oxp6ppcpn3c4dyi8inf0bjs91xmfd00tpp ## JWT_SECRET
      - VERIFY_JWT=false

    volumes:
      - /root/supabase/docker/volumes/functions:/home/deno/functions:Z

## --------------------------- ORION --------------------------- ##

  analytics:
    image: supabase/logflare:1.4.0 ## Versão da imagem

    healthcheck:
      test: [ "CMD", "curl", "http://localhost:4000/health" ]
      timeout: 5s
      interval: 5s
      retries: 10
    restart: unless-stopped

    networks:
      - minha_rede ## Nome da rede interna

    ports:
      - 4000:4000

    environment:
      - LOGFLARE_LOG_LEVEL=debug
      - DB_USERNAME=supabase_admin
      - DB_DATABASE=postgres
      - DB_HOSTNAME=db
      - DB_PORT=5344
      - DB_PASSWORD=SENHA_DO_POSTGRES_AQUI # OK
      - DB_SCHEMA=_analytics

      ## Logflare
      - LOGFLARE_SUPABASE=true
      - LOGFLARE_SINGLE_TENANT=true
      - LOGFLARE_SINGLE_TENANT_MODE=true
      - LOGFLARE_SUPABASE_MODE=true
      - LOGFLARE_NODE_HOST=127.0.0.1
      - LOGFLARE_API_KEY=69ab4df7-0098-4821-9951-7f2b8bbe6d14 ## Key aleatória
      - LOGFLARE_MIN_CLUSTER_SIZE=1


      - POSTGRES_BACKEND_URL=postgresql://supabase_admin:SENHA_DO_POSTGRES_AQUI@db:5344/postgres # OK
      - POSTGRES_BACKEND_SCHEMA=_analytics
      - LOGFLARE_FEATURE_FLAG_OVERRIDE=multibackend=true
      
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager  
      labels:
        - traefik.enable=true
        - traefik.http.routers.vector.rule=Host(`sup-studio.tinklare.com`) ## Url do Kong
        - traefik.http.services.vector.loadbalancer.server.port=4000
        - traefik.http.routers.vector.service=vector
        - traefik.http.routers.vector.entrypoints=websecure
        - traefik.http.routers.vector.tls.certresolver=letsencryptresolver
        - traefik.http.routers.vector.tls=true

## --------------------------- ORION --------------------------- ##
  db:
    image: supabase/postgres:15.1.0.147 ## Versão da imagem

    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10

    networks:
      - minha_rede ## Nome da rede interna
    ports:
      - 5344:5344 ## Porta externas

    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
      - -c
      - log_min_messages=fatal

    environment:
      ## Dados Postgres
      - POSTGRES_HOST=/var/run/postgresql
      - PGPORT=5344 ## Porta do Postgres
      - POSTGRES_PORT=5344 ## Porta do Postgres
      - PGPASSWORD=SENHA_DO_POSTGRES_AQUI  ## Senha do Postgres #OK
      - POSTGRES_PASSWORD=SENHA_DO_POSTGRES_AQUI  ## Senha do Postgres #OK
      - PGDATABASE=postgres
      - POSTGRES_DB=postgres

      ## Dados JWT
      - JWT_SECRET=fcvxe9oxp6ppcpn3c4dyi8inf0bjs91xmfd00tpp ## JWT_SECRET
      - JWT_EXP=3600

    volumes:
      - /root/supabase/docker/volumes/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
      - /root/supabase/docker/volumes/db/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql:Z
      - /root/supabase/docker/volumes/db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
      - /root/supabase/docker/volumes/db/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/99-jwt.sql:Z
      - /root/supabase/docker/volumes/db/data:/var/lib/postgresql/data:Z ## Precisa de criar o diretório, use: sudo mkdir -p /var/lib/postgresql/data
      - /root/supabase/docker/volumes/db/logs.sql:/docker-entrypoint-initdb.d/migrations/99-logs.sql:Z
      - supabase_db_config:/etc/postgresql-custom

## --------------------------- ORION --------------------------- ##

  vector:
    image: timberio/vector:0.28.1-alpine ## Versão da imagem
    entrypoint: /bin/sh
    command: -c "apk update && apk add curl && vector --config etc/vector/vector.yml"

    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://analytics:4000/health && echo 'Health check passed' || (echo 'Health check failed' && exit 1)"]
      timeout: 15s
      interval: 15s
      retries: 3
      start_period: 10s


    networks:
      - minha_rede ## Nome da rede interna

    ports:
      - 9001:9001
      
    environment:
      - VECTOR_LOG=debug
      
      ## Logflare key
      - LOGFLARE_API_KEY=69ab4df7-0098-4821-9951-7f2b8bbe6d14 ## Key aleatória


    #volumes:
    #  - /root/supabase/docker/volumes/logs/vector.yml:/etc/vector/vector.yml:ro ###
    #  - /var/run/docker.sock:/var/run/docker.sock:ro
    volumes:
    - /root/supabase/docker/volumes/logs/vector.yml:/etc/vector/vector.yml:ro
    #- /var/lib/docker:/var/run/docker.sock:ro ## Teste
    - /var/run/docker.sock:/var/run/docker.sock:ro ## Original estava assim
    #- /var/lib/docker/docker.sock:/var/run/docker.sock:ro ## Outra possibilidade caso der errado



    #- /root/supabase/docker/volumes/api/kong.yml:/home/kong/temp.yml:ro

## --------------------------- ORION --------------------------- ##

volumes:
  supabase_db_config:
    external: true
    name: supabase_db_config

networks:
  minha_rede: ## Nome da rede interna
    external: true
    name: minha_rede ## Nome da rede interna
